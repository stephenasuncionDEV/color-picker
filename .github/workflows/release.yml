name: .NET WinForms Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and Release ${{ vars.APP_NAME }}
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ vars.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ vars.PROJECT_PATH }}

    - name: Build project
      run: dotnet build ${{ vars.PROJECT_PATH }} --configuration Release --no-restore

    - name: Publish project
      run: >
        dotnet publish ${{ vars.PROJECT_PATH }}
        --configuration Release
        --output ${{ vars.OUTPUT_DIR }}
        --no-build
        -p:PublishSingleFile=false  # Consider 'true' for a single .exe (may have limitations)
        # -p:IncludeNativeLibrariesForSelfExtract=true # Useful if PublishSingleFile=true
        -r win-x64                  # Specify runtime (e.g., win-x64, win-arm64). Ensures self-contained includes correct native binaries.
        --self-contained true       # Set to 'false' if users must have the .NET runtime installed.
        # Note: Ensure your .csproj is configured with <OutputType>WinExe</OutputType> for WinForms.
        # If you use a publish profile, you can add:
        # -p:PublishProfile=Properties\PublishProfiles\FolderProfile.pub # Adjust path to your .pubxml file

    - name: Determine Release Version and Tag
      id: version_info
      shell: bash
      run: |
        REF_TYPE="${{ github.ref_type }}"
        REF_NAME="${{ github.ref_name }}"
        SHA="${{ github.sha }}"
        RUN_NUMBER="${{ github.run_number }}"

        if [[ "$REF_TYPE" == "tag" ]]; then
          TAG_NAME="$REF_NAME"
          if [[ "$REF_NAME" == v* ]]; then
            VERSION="${REF_NAME#v}"
          else
            VERSION="$REF_NAME"
          fi
        else
          VERSION="0.0.${RUN_NUMBER}-${SHA:0:7}"
          TAG_NAME="build-${VERSION}"
        fi

        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_ENV
        echo "Determined Release Tag: ${TAG_NAME}"
        echo "Determined Release Version: ${VERSION}"

    - name: Archive publish output
      shell: pwsh # PowerShell is readily available on Windows runners
      run: |
        zipFileName="${{ vars.APP_NAME }}-${{ env.RELEASE_VERSION }}.zip"
        zip -r "$zipFileName" ${{ vars.OUTPUT_DIR }}
        echo "ASSET_PATH=./$zipFileName" >> $GITHUB_ENV
        echo "ASSET_NAME=$zipFileName" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: ${{ vars.APP_NAME }} Release ${{ env.RELEASE_VERSION }}
        body: |
          Automated release for **${{ vars.APP_NAME }} v${{ env.RELEASE_VERSION }}**.

          Triggered by: `${{ github.event_name }}`
          Branch/Tag: `${{ github.ref }}`
          Commit: `${{ github.sha }}`

          **Artifacts:**
          - `${{ env.ASSET_NAME }}` (Application files)
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        files: ${{ env.ASSET_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 